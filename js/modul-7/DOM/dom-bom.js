// JavaScript у браузері
// Коли JavaScript виконується у браузері, у нього є додатковий функціонал для роботи з
// вкладкою.Цей функціонал складається з таких модулів: ECMAScript, DOM, BOM.
// ECMAScript(скорочено ES) — це стандарт, який описує мову програмування JavaScript.
// Цей стандарт визначає синтаксис і семантику мови, а також набір вбудованих об'єктів і
// функцій для роботи з даними, текстом, датами та іншими аспектами програмування.ECMAScript
//  надає основну структуру мови, на якій базується JavaScript.Різні версії JavaScript
// реалізуються через різні версії стандарту ECMAScript.Наприклад, ES5, ES6(або ES2015),
// ES2016, ES2017 тощо — це різні версії ECMAScript, які впроваджують нові можливості
// та покращення в мову.
// Об'єктна модель документа (Document Object Model) — незалежний інтерфейс для роботи з
// HTML - документом.Ця модель містить набір властивостей і методів, що дозволяють шукати,
// створювати й видаляти елементи, реагувати на дії користувача і багато іншого, тобто
// поєднує сторінку з мовою програмування.
//     DOM — це відображення HTML - документа.Виглядає як деревоподібна структура, у якій кожен
// вузол — це JavaScript - об'єкт із властивостями та методами, що становить частину
// HTML - документа.Кожен елемент у документі, весь документ в цілому, заголовок, посилання,
// абзац — це частини DOM цього документа, тому всі вони можуть бути змінені з
// JavaScript - коду.
//     Об'єктна модель браузера (Browser Object Model) — незалежний від мови інтерфейс для
// роботи з браузером.Містить набір властивостей і методів, що дозволяють отримати доступ до
// ряду функцій браузера.Саме завдяки BOM можна отримувати розміри вікна браузера,
// прокручувати сторінку, читати URL, працювати з історією навігації, місцем
// розташування тощо.
// HTML-документ і DOM
// Згідно з DOM - моделлю, кожен тег утворює окремий елемент - вузол(element node), а кожен
// фрагмент тексту всередині елемента — текстовий вузол(text node).

// // HTML - документ — це ієрархічне дерево, у якому кожен елемент(окрім кореневого)
// вкладений в один батьківський елемент.На схемі бачимо, що елемент html розташовується
// всередині document.Отже, document — це батьківський елемент для html.Аналогічно, html —
// батьківський елемент для
// [head](<http://head.nf>) і body. У document нема батьківського елемента, бо document —
// це кореневий елемент.За рахунок вкладеної структури тегів і текстових елементів
// утворюється ієрархічне дерево.
//
// document -> HTML -> head -> meta
//             |        |---> meta
//             |        |---> title
//             |        |---> link
//             |
//             |----> body ->div
//                    |---->script

// Як складається DOM-дерево?
//     Щоб відобразити HTML - документ, браузер спочатку перетворює його у формат, який він
// розуміє — DOM.Інтерпретатор браузера має спеціальний фрагмент коду — HTML - парсер, який
// використовується для перетворення HTML у DOM.
// В HTML вкладеність визначає відносини батько - дитина між елементами.У DOM об'єкти
// пов'язані в деревоподібній структурі даних, фіксуючи ці відносини.
// Браузер будує DOM поступово, щойно надходять перші фрагменти коду, він починає парсити
// HTML, додаючи вузли в деревоподібну структуру.Після того як DOM - дерево побудовано,
// у ньому можна знайти елемент за допомогою JavaScript.Оскільки кожен елемент має інтерфейс
// із безліччю властивостей і методів, з ним можна виконувати необхідні дії.

// Структура DOM-дерева
// Для візуалізації дерева HTML - документа використовується сервіс генератор DOM - дерева
//     (https://software.hixie.ch/utilities/js/live-dom-viewer/):
// Копіюємо розмітку у вікно зверху
//
// <!DOCTYPE html>
// <html>
//   <head>
//     <title>Document title</title>
//   </head>
//   <body>
//     <h1>Page title</h1>
//     <ul>
//       <li><a href="#">Link 1</a></li>
//       <li><a href="#">Link 2</a></li>
//     </ul>
//   </body>
// </html>
// У вікні нижче з’являється деревоподібна ієрархія
// У цьому дереві виділені два типи вузлів.
// Вузли - елементи(element node) утворюються тегами, зазвичай одні елементи вкладені в
// інші.
// Структура дерева утворена виключно за рахунок них.
// Текстові вузли(text node) утворюються текстом всередині елементів.Текстовий вузол
// містить тільки рядок тексту й не може мати дочірніх елементів, тобто він завжди на
// найнижчому рівні ієрархії.Пробіли й перенесення рядків — це також текстові вузли.Саме
// тому на схемі текстових вузлів більше, ніж вузлів - елементів.Якщо прибрати всі
// абзаци / пробіли між вузлами - елементами(тегами), то схема буде виглядати більш звично.

// З цього правила є винятки:
// пробіли до head ігноруються
// будь - який вміст після body не створює елемент, замість цього браузер переносить його в
// кінець 'body'
