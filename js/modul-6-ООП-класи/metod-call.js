// Метод call()
// Бувають ситуації, коли функцію потрібно викликати в контексті об'єкта, навіть якщо
// функція не є методом цього об'єкта. Для цього у JavaScript існують спеціальні методи:
// call, apply і bind, які дозволяють вказати контекст виклику функції.
//
// Вивчимо сигнатуру цього методу. Сигнатура — це ім'я методу і його параметри.
// Сигнатура методу call**()** виглядає так:
// foo.call(thisArg, arg1, arg2, ...)
// thisArg — об'єкт, який ми хочемо встановити як контекст (значення this) для функції
// arg1, arg2, ... — необов'язкові аргументи, які будуть передані функції
// Метод call викликає функцію foo так, що значення this у функції буде посилатися на
//  об'єкт thisArg, і також передає їй аргументи arg1, arg2 тощо.
// Розглянемо приклад: давай створимо функцію greet, яка вітає різних користувачів готелю,
// кожен з яких представлений об'єктом з властивостями username і room. Функція приймає
//  один параметр, str — рядок привітання.
//
// function greet(str) {
//   console.log(`${str}, ${this.username}, your room is ${this.room}!`);
// }
//
// const mango = {
//   username: "Mango",
// 	 room: 27
// };
//
// const poly = {
//   username: "Poly",
// 	 room: 191
// };
//
// За допомогою методу call ми можемо викликати функцію greet так, щоб значення this
// вказувало на потрібний об'єкт і використовувало значення його властивостей.
//
// greet.call(mango, "Welcome"); // "Welcome, Mango, your room is 27!"
// greet.call(poly, "Aloha"); // "Aloha, Poly, your room is 191!"
