// Метод apply()
// Метод apply є аналогом методу call.Відмінність у тому, що в методі apply() синтаксис
// передачі аргументів вимагає масиву, навіть якщо аргументи функції — це окремі значення.
// Сигнатура методу apply**()** виглядає так:
// foo.apply(thisArg, [arg1, arg2, ...])
// thisArg — об'єкт, який ми хочемо встановити як контекст (значення this) для функції.
// arg1, arg2, ... — необов'язкові аргументи, які будуть передані функції.
// Метод apply викликає функцію foo таким чином, що значення this у функції буде посилатися
//  на об'єкт obj і передасть елементи масиву як окремі аргументи arg1, arg2 тощо.
// Розгляньмо приклад, де використаємо раніше оголошену нами функцію greet.Цього разу
// викликаємо її, використовуючи метод apply замість call.
// function greet(str) {
//   console.log(`${str}, ${this.username}, your room is ${this.room}!`);
// }
//
// const mango = {
//   username: "Mango",
// 	room: 27
// };

// const poly = {
//   username: "Poly",
// 	room: 191
// };
//
// greet.apply(mango, ["Welcome"]); // "Welcome, Mango, your room is 27!"
// greet.apply(poly, ["Aloha"]); // "Aloha, Poly, your room is 191!"
//
// Тобто різниця між call і apply полягає лише у формі передачі аргументів.Вибір між
// call і apply залежить від того, як саме ти хочеш передавати аргументи до функції в
// конкретній ситуації.У всіх інших аспектах вони працюють ідентично: викликають функцію в
// контексті зазначеного об'єкта і передають їй аргументи.
